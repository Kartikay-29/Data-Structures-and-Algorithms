PROBLEM STATEMENT: Given an m x n matrix, return all elements of the matrix in spiral order.


https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

CODE:
class Solution {
    public List<Integer> spiralOrder(int[][] arr) {

        int n=arr.length;
        int m=arr[0].length;
        int tr=0;
        int br=n-1;
        int lc=0;
        int rc=m-1;
        List<Integer> ans=new ArrayList<>();
        while(lc<=rc && tr<=br) {
			for(int i=lc;i<=rc ;i++) {
				ans.add(arr[tr][i]);
				
			}
				
			tr++;
			for(int i=tr;i<=br;i++) {
				ans.add(arr[i][rc]);
				
			}
			rc--;
            if(tr<=br){
			for(int i=rc;i>=lc;i--) {
				ans.add(arr[br][i]);
				
	
		    }
			br--;}
            if(lc<=rc){
			for(int i=br;i>=tr;i--) {
				ans.add(arr[i][lc]);
				
			}
			lc++;}
	}
    return ans;
    }
}



OUTPUT:

CASE 1:
Input
matrix =
[[1,2,3],[4,5,6],[7,8,9]]
Output
[1,2,3,6,9,8,7,4,5]
Expected
[1,2,3,6,9,8,7,4,5]


CASE 2:
Input
matrix =
[[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output
[1,2,3,4,8,12,11,10,9,5,6,7]
Expected
[1,2,3,4,8,12,11,10,9,5,6,7]
