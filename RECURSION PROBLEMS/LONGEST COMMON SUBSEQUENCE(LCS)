PROBLEM STATEMENT:
Given two strings S1 and S2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: S1 = "abcde", S2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: S1 = "abc", S2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: S1 = "abc", S2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.




CODE:
class Solution {
  
    public int longestCommonSubsequence(String S1, String S2) {
        
		return lcs(S1,S2,S1.length(),S2.length());
    }
    static int lcs(String S1,String S2, int m,int n){
         //int m=S1.length();
         //int n= S2.length();
        if(m==0||n==0) 
			return 0;
		
		if(S1.charAt(m-1)==S2.charAt(n-1)) {
			return 1+lcs(S1,S2,m-1,n-1);
		}
		else {
			return Math.max(lcs(S1,S2,m,n-1),lcs(S1,S2,m-1,n));
		}
    }
}


CASE1:
Input
S1 =

"abcde"

S2 =

"ace"

Output
3
Expected
3



CASE2:
Input
S1 =
"abc"
S2 =
"abc"
Output
3
Expected
3




CASE3:
Input
S1 =
"abc"
S2 =
"def"
Output
0
Expected
0
